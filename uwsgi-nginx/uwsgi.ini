[uwsgi]
## 程序的主目录
chdir = /var/jm-schedule
## 程式的wsgi文件
#wsgi-file = run.py
module = uwsgi_run
## flask应用实例的名称，是flask独有的配置项（django不需要）。
## 由于flask存在特殊的机制，可以实例化多个application，需要明确指出，收到请求时，uwsgi应该调用哪个应用实例。
callable = app
#manage-script-name = true 
## 开发模式使用
#py-autoreload = true 
#http-socket = :8003 
#socket = :8003
## 开启主进程
master = true
## 用于和 nginx 进行数据交互
socket = /tmp/uwsgi.sock
chmod-socket = 666
##
#plugin = python,http
## 进程数
processes = 2
## 由于GIL的存在，uwsgi索性默认不支持多线程，不对GIL进行初始化。但如果希望程序中的线程发挥作用，需要加入enable-threads=True
enable-threads=True
## 但如果已经在多线程模式（使用 threads 选项）下，那么uWSGI将会自动启用线程支持
## 线程数
threads = 2
## 为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。
## 你可以使用这个选项来默默地对抗内存泄漏
max-requests = 500
## 当服务器退出的时候自动清理环境，删除unix socket文件和pid文件
vacuum = true
## 超时设置
harakiri-verbose = true
harakiri=60
## 缓冲区设置
post-buffering = 65536 # 不设置会导致上传大文件失败
buffer-size = 65536 ##
## 在有cassandra，kafka等应用的专案中要开启lazy-apps和touch-chain-reload
lazy-apps=true
touch-chain-reload=true
# monitor uwsgi status  通过该端口可以监控 uwsgi 的负载情况
#stats = 127.0.0.1:9191
## 为所有的socket操作设置内部超时时间（默认4秒）
## 这个配置会结束那些处于不活动状态超过10秒的连接
socket-timeout=10
## 当一个工作进程的虚拟内存占用超过了限制的大小，那么该进程就会被回收重用（重启）
## 这个配置会重启所有占用虚拟内存超过128M的工作进程。当工作进程因此重启时，本次请求的响应不会受影响，返回正常结果
reload-on-as=128
#跟reload-on-as的效果类似，不过这个选项控制的是物理内存。你可以同时使用这2个选项：reload-on-as=128  reload-on-rss=96
reload-on-rss=96
## 设置在平滑的重启（直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数。
## 这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束）
reload-mercy = 8
## 设置一个worker重载/关闭可以花费的最大时间 (以秒为单位，默认是60)
worker-reload-mercy = 10
